В аттаче проект ASP .NET MVC/WEB API приложения, где я менял/расширял только каталоги Controllers, Model и Core. В коде допущено некоторое количество разнотипных ошибок, которые надо исправить. Помимо исправления кода надо сделать следующее:
1.	Расширить контроллер Orders методами обновления ордера и удаления
2.	Добавить логирование в общем и в частности - логирование каждого метода контроллера типа «такой-то метод начался» и «такой-то метод закончился и занял столько-то времени»
3.	Добавить Swagger UI



Очень неплохой вариант реализации, но есть несколько моментов, на которые я бы хотел обратить внимание:

1.	Фильтр, который замеряет время, может работать неправильно – если для всех реквестов будет использоваться один и тот же инстанс, то запросы будут мешать друг другу. Сколько инстансов используется – один на всех или по новому на каждый запрос зависит от внутренней реализации МВЦ и может от версии к версии отличаться. Поэтому лучше каждый раз содавать новый Stopwatch и пробрасывать его из Executing в Executed через HttpContext. Еще небольшой момент – лучше сделать так, чтобы атрибут достаточно было поставить на уровне контроллера, чтобы не приходилось его на каждый метод копипастить.
2.	Update и Delete в репозитории явно обрабатыват вложенную коллекцию, с ростом количества вложенных коллекций сложность этих методов будет сильно увеличиваться. Подумай, как это можно обобщить.
3.	Разделение на Core и Infrastructure выглядит сильно искусственным, я бы их лучше «схлопнул» в одну сборку
4.	Подумай над обработкой ошибок как минимум в двух моментах:
a.	Как логировать любой эксепшен возникший на сервере (сейчас логируется только то, что на сохранении)
b.	Что будет получать клиент в ответ на эксепшен, какую информацию ему нужно передавать?
5.	Я бы не смешивал подоходы с возвратом IHttpActionResult и конкретных типов, лучше все сделать в едином стиле – так, как у тебя сделан GetOrders. 
6.	В контроллере версионность API лучше заложить заранее – например, добавить суффикс «v1»
7.	Могут ли быть какие-то проблемы с обработкой даты/времени сохраняемого в поле ордера CreatedDate?
8.	В методах, которые только читают данные из EF контекста лучше использовать AsNoTracking, чтобы EF не делал лишний DirtyCheck на закрытии контекста
9.	Текущий подход с фильтрацией ордеров через CustomerManager в дальнейшем приведет к проблемам с сортировкой/пейджингом, потому что сейчас доп. фильтрация выполняется после вычитки данных из базы. Это будет очень актуально, когда я пришлю дополнительные требования к задаче, этот пункт пока можно не исправлять.



Вот дополнительные требования:

1.	Добавить в каждую строку лога correlation Id запроса, этот идентификатор должен быть одинаков для всех строк в логе, выведенных в пределах одного обращения к серверу
2.	Добавить сортировку и пейджинацию в метод для получения списка ордеров
3.	Добавить в методы чтения ордеров (как списка так и по отдельности) возможность указать валюту, в которую нужно пересчитывать цены продуктов. Предположим, что в базе сумма указана в долларах. Курс необходимо получить из внешнего сервиса https://free.currencyconverterapi.com/ 
4.	Прикрутить StyleCop к проекту с набором правил на выбор (я обычно отключаю все документационные правила и смотрю что еще из некритичного можно не включать), таким образом, что нарушение правил валит компиляцию с ошибкой
